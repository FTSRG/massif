package hu.bme.mit.massif.models.simulink.viewer

import "http://hu.bme.mit.massif/simulink/1.0"
import hu.bme.mit.massif.models.simulink.util.lineName
import hu.bme.mit.massif.models.simulink.util.portConnection
import hu.bme.mit.massif.models.simulink.util.busMappingInSelector

pattern portOfPortBlock(port, portBlock) {
	Port.portBlock(port, portBlock);
}

@Item(item = bl, label = "$bl$")
@Format(color = "#191970", textColor = "#FFFFFF")
pattern portBlock(bl){
	PortBlock(bl);
}


pattern blockPorts(block, port) {
	Block.ports(block,port);
}

pattern portOfSimpleBlock(port, block) {
	find blockPorts(block, port);
	neg find portOfPortBlock(port, _t);
	neg find subBlocks(block, _sub2);
}

pattern ignoredBlock(bl) {
	SubSystem(bl);
} or {
	PortBlock(bl);
} or {
	Goto(bl);
} or {
	From(bl);
}/* or {
	GotoTagVisibility(bl);
}*/

@Item(item = bl, label = "$bl$")
@Format(color = "#F5F5F5", textColor = "#191970")
pattern block(bl) {
	Block(bl);
	neg find ignoredBlock(bl);
}

@Item(item = bl, label = "From")
@Format(color = "#F5F5F5", textColor = "#191970")
pattern fromBlocks(bl) {
	From(bl);
}

@Item(item = bl, label = "Goto")
@Format(color = "#F5F5F5", textColor = "#191970")
pattern gotoBlocks(bl) {
	Goto(bl);
}

@Item(item = subS, label = "$subS.tag$ $subS$")
@Format(color = "#F0FFFF", textColor = "#FFFFFF")
pattern subSystem(subS) {
	SubSystem(subS);
	find subBlocks(subS, _bl);
}

@Item(item = subS, label = "$subS.tag$ $subS$")
@Format(color = "#F0FFFF", textColor = "#000000")
pattern emptySubSystem(subS) {
	SubSystem(subS);
	neg find subBlocks(subS, _bl);
}

@ContainsItem(container = subSys, item = bl)
pattern subBlocks(subSys, bl){
	SubSystem.subBlocks(subSys, bl);
	//neg find portBlock(bl);
}

/**
 * connection is either:
 * - block-to-block when neither has subBlocks
 * - portBlock-to-block when the source is contained by the parent of the target
 * - block-to-portBlock when the target is contained by the parent of the source
 * - portBlock-to-portBlock when the target and the source are in different subsystems 
 */
pattern nonNullLineName(conn, name) {
	find lineName(conn, name);
} or {
	Connection(conn);
	neg find lineName(conn, _noname);
	name == "";
}

@Edge(source = from, target = to, label = "$name$")
@Format(lineColor = "#000080")
pattern portToPortConnection(from, to, name) {
	find portOfSimpleBlock(outP,from);
	find portConnection(outP, inP, firstPC);
	find nonNullLineName(firstPC, name);
	find portOfSimpleBlock(inP,to);
}

@Edge(source = from, target = to, label = "goto")
@Format(lineColor = "#228B22", lineStyle = "dashed")
pattern gotoConnection(from, to) {
	Goto.fromBlocks(from, to);
}

@Edge(source = from, target = to, label = "$name$")
@Format(lineColor = "#D93F3F")
pattern hierarchyConnection(from, to, name) {
	find hierarchyConnectionEnd(outP,from);
	find portConnection(outP, inP, firstPC);
	find nonNullLineName(firstPC, name);
	neg find portToPortConnection(from, to, _pc);
	find hierarchyConnectionEnd(inP, to);
}

pattern hierarchyConnectionEnd(port, block){
	find portOfPortBlock(port, block);
} or {
	find portOfSimpleBlock(port, block);
}

@Edge(source = busSelector, target = from, label = "[$name$ -> $toName$]")
@Format(lineColor = "#228B22", lineStyle = "dotted")
pattern busSignalMappingSource(busSelector, from, name, toName) {
	find busMappingInSelector(busSelector, _mapping, fromOP, to);
	find hierarchyConnectionEnd(fromOP,from);
	find portConnection(fromOP, _inP, fromPC);
	find portConnection(to, _toP, toPC);
	find nonNullLineName(fromPC, name);
	find nonNullLineName(toPC, toName);
}